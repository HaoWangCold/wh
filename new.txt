git命令
git init ：把当前所在目录变为git库

一：创建版本库
版本库又名仓库，英文名repository
1.git add :添加文件
2.git commit -m “备注” ：提交到库中

二:时光穿梭机
1.git status ：可以让我们时刻掌握仓库当前的状态 
三：版本回退
1. git log ：命令显示从最近到最远的提交日志
   git log --pretty=oneline  :显示在一行
2. git  reset --hard HEAD^ ： 回退到上一个版本 要是回退到之前的100个版本 HEAD~100即可
3. git reflog ：用来记录你的每一次命令
小结
现在总结一下：
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

四 ： 远程仓库
1.ssh-keygen -t rsa -C "1208922591@qq.com"：创建ssh密钥 (一路回车即可)
2.$ cat ~/.ssh/id_rsa.pub ：查询生成的ssh密钥
3. git remote add origin http://github.com/HaoWangCold/wh.git ：链接到网站的数据库
4. git push -u origin master :把本地库文件上传到网站服务器上（所有内容 ）
	注：加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
	第二次开始可以去掉 -u 
	即：git push  origin master
5. git clone git@github.com:HaoWangCold/gitskills.git ： 把文件从github上下载下来
	注: git@github.com:HaoWangCold 与  http://github.com/HaoWangCold 是一个意思 但用的协议不同。git用的是ssh协议，http用的是https协议
	
五：分支管理
1. 查看分支：git branch
2.创建分支：git branch <name>
3.切换分支：git checkout <name>
4.创建+切换分支：git checkout -b <name>
5.合并某分支到当前分支：git merge <name>
6.删除分支：git branch -d <name> 内容合并，普通删除。
	    git branch -D <name> 修改内容不需要，强行删除。	

创建dev分支 : git checkout -b dev 相当于 git branch dev 加上 git checkout dev
 
7.当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。即再修改一次之后 确定修改的内容，也会使master分支往前移一位，这样，合并就没有冲突了，也会存你最新修改的内容。
  git log --graph ： 可以看到分支合并图	
  $ git log --graph --pretty=oneline --abbrev-commit： 查看分支合并图 。
 

8. Git分支十分强大，在团队开发中应该充分应用。
  合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
										
9.git stash list ： 查看工作区存放位置
  恢复工作区的两种方法 ：1. git stash apply 但是恢复后，stash内容并不删除，你需要用  git stash drop来删除
			 2. git stash pop ： 恢复的同时把stash内容也删了
  修复bug的方法:切换到出现bug的分支，在出现bug的分支上新建一个新的分支修复bug，最后合并分支即可。

10.多人协作的工作模式通常是这样：
	1)首先，可以试图用git push origin branch-name推送自己的修改；
	2)如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
	3)如果合并有冲突，则解决冲突，并在本地提交；
	4)没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
11.  git remote -v : 查看远程库信息；
	本地新建的分支如果不推送到远程，对其他人就是不可见的；
	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

六：标签管理
1. git tag <name>  :  用于新建一个标签，默认为HEAD，也可以指定一个commit id；
2. git tag -a <tagname> -m "blablabla..."   ：可以指定标签信息；
3. git tag -s <tagname> -m "blablabla..."   ： 可以用PGP签名标签；
4. git tag  ：可以查看所有标签。
5. git log  --pretty=oneline --abbrev-commit : 可以查看历史提交的id
6. git tag -d <tagname>  : 删除标签
7. git push origin <tagname>  :  把标签名推送至远程
8. git push origin --tage  : 把所有未推送到远程的标签推送到远程
9.删除远程标签
	1）git tag -d <tagname> :  先删除本地
	2）git push origin :refs/tags/v0.9 : 再删除远程标签


七：使用GitHub
1.在GitHub上，可以任意Fork开源仓库；
2.自己拥有Fork后的仓库的读写权限；
	如果想修改 使用 git clone git@github.com:michaelliao/bootstrap.git 克隆一个bootstrap仓库
3.可以推送pull request给官方仓库来贡献代码。

八：自定义git
1. git config --global color.ui true  ： 让Git显示颜色
2.忽略某些文件时，需要编写.gitignore；
	.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理
3.忽略文件的原则是：
	1)忽略操作系统自动生成的文件，比如缩略图等；
	2)忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
	3)忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
4. git config --global alias.st status	 :  status简写成st也可以执行
	--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用
5.配置文件放在每个仓库的Git配置文件都放在.git/config文件中,别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。